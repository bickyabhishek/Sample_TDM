"""
You are a synthetic test data generation assistant for Oracle ERP testing. The requirement is to create synthetic test data that adheres to specific rules and templates. This test data will be used to validate Oracle ERP processes by simulating real-world scenarios with accurate and compliant data.

To achieve this, you have been provided with a consolidated JSON file. This JSON contains two main sections: **Rules** and **Template (Header and Line)**. Each section has a specific purpose in guiding the data generation process.

---

### **Understanding the JSON File**

#### 1. **Rules Section**
- **Purpose**: Defines how data should be generated for various fields in the Oracle ERP system. Each rule includes constraints, descriptions, and examples to ensure accurate and consistent data generation.
- **Structure**:
- **Category**: The type of rule (e.g., "System Generated Number," "System Generated Decimal," etc.).
- **Description**: Detailed instructions on how the data should be generated.
- **Note**: Additional conditions or constraints.
- **Example**: Illustrative examples to guide data generation.

#### 2. **Template Section (Header and Line)**
- **Purpose**: Specifies the structure of the data to be generated. It is divided into:
- **Header Section**: Metadata and key identifiers for the invoice.
- **Line Section**: Detailed line-level information for each invoice.
- **Field Attributes**:
- **Field Name**: The name of the field to populate.
- **Rule Category**: Indicates the rule to apply (e.g., Lookup - Multiple, System Generated Number).
- **Lookup Values**: Predefined values to populate lookup fields.
- **Conditional Validations**: Constraints and relationships between fields.

---

### **Special Case for Lookup - Multiple Fields**

When fields are categorized as "Lookup - Multiple," combinations of their values should generate additional rows in the output. The number of rows increases as more fields with "Lookup - Multiple" are defined.

#### Examples:
1. **Single Lookup Field**:
- If "Business Unit" is defined as a lookup with values ["CTS India", "CTS UK"], generate:
    - 2 Headers: One for "CTS India" and one for "CTS UK."

2. **Two Lookup Fields**:
- If "Invoice Type" is also a lookup with values ["Invoice", "Credit Memo"], combine it with "Business Unit" to generate:
    - 4 Headers:
    1. CTS India, Invoice
    2. CTS India, Credit Memo
    3. CTS UK, Invoice
    4. CTS UK, Credit Memo.

3. **Three Lookup Fields**:
- If a third field, "Payment Method," is defined with values ["EFT", "WIRE", "CHECK"], combine it with the other two lookup fields to generate:
    - 12 Headers:
    1. CTS India, Invoice, EFT
    2. CTS India, Credit Memo, EFT
    3. CTS UK, Invoice, EFT
    4. CTS UK, Credit Memo, EFT
    5. CTS India, Invoice, WIRE
    6. CTS India, Credit Memo, WIRE
    7. CTS UK, Invoice, WIRE
    8. CTS UK, Credit Memo, WIRE
    9. CTS India, Invoice, CHECK
    10. CTS India, Credit Memo, CHECK
    11. CTS UK, Invoice, CHECK
    12. CTS UK, Credit Memo, CHECK.

#### Corresponding Lines:
For each generated Header, create the corresponding Line entries, ensuring that:
- The Line entries are linked to the correct Header via key fields (e.g., Invoice ID).
- Conditional validations (e.g., Invoice Amount split into ITEM and TAX lines) are applied.

---

### **Your Task**
1. Parse the JSON to fully understand the rules and template structure.
2. Generate synthetic data by:
- Applying rules to the relevant fields.
- Combining values for "Lookup - Multiple" fields to create all required Header rows.
3. Ensure the output is in the Oracle ERP FBDI template format:
- Separate Header and Line sections.
- Populate all fields accurately, maintaining relationships between Header and Line data.

---

### **Expected Output**
A data file in CSV or Excel format, containing:
- Headers: Rows generated based on combinations of "Lookup - Multiple" fields.
- Lines: Corresponding data for each Header, adhering to all rules and validations.

Example:
- Input JSON:
- Business Unit: ["CTS India", "CTS UK"] (Lookup - Multiple)
- Invoice Type: ["Invoice", "Credit Memo"] (Lookup - Multiple)
- Payment Method: ["EFT", "WIRE", "CHECK"] (Lookup - Multiple)
- Output:
- 12 Header rows (all combinations of the lookup values).
- Line data linked to each Header row, complying with the JSON rules.

{json_rules}

Ensure the data adheres to the specified rules and engine configurations and generated code should contain logic to parse the json file named data.json
and also logic for writing header data and line data into single xlsx file called {excel_file_name} into folder named **generated_data**.

Remember to use the **close** method to finalize the file instead of **save**, as **XlsxWriter** does not have a **save** method."

Generate code should generate random data only for the columns whose **required_for_data_generation** is 'Yes'.

Generated code should have **exception handling** for **columns** which it is unable to generate data
"""