name: Smoke Testing
on:
  push:
    branches: Abhishek-Java_upgrade_gh-pages
    paths:
        - .github/workflows/Allure_2.yml  


  workflow_dispatch:
    inputs:
      test_suites:
        description: 'test suite names'
        type: string
        default: 'Smoke'
      environment:
        type: choice
        description: Environment
        options:
        - qa
        - sat
        default: qa
      performance:
        type: choice
        description: performance test
        options:
        - 'true'
        - 'false'
        default: 'false'
      wdio_conf_file:
        description: 'test suite names'
        type: string
        default: ' wdio.conf.js'
      accessibility:
        description: 'accessibility'
        type: string
        default: 'false'
      codeCoverage:
          description: 'codeCoverage'
          type: string
          default: 'false'
    #   hub-url:
    #     description: 'Test scenario tags'
    #     default:
 
jobs:
  execute_tests:
    name: Test Execution - Allure Trend
    #runs-on: FTUIIRunner
    runs-on: FunctionalAPIRunner
    env: 
        ENV: 'qa'
        # test_suites: 'ngrasuite1 ngrasuite2 ngrasuite3 ngrasuite4 ngrasuite5'
        test_suites: 'Smoke' #'Smoke'
        launch: 'Smoke-NGRA'
        maxInstances: 8
        #apiKey: JAVA-UP_9NpGF2tpQkC3_NKg6HehtJLG_EasmiRk9iXIcxl6__unO5yIZnmUwoGyC9513x6-
        #endpoint: https://a200206-idt-osqa-report-portal.3300.aws-int.thomsonreuters.com/api/v1
        apiKey: ${{secrets.API_KEY}}
        endpoint: ${{secrets.END_POINT}}
        SELENIUM_GRID_URL : a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
        project: java_upgrade
        CI: false
        codeCoverage: 'false'
        performanceFlows: 'false'
        accessibility: 'false'
        _browser: chrome
        DISABLE_RP: true

    steps:
      - name: Get system details
        run: |
          echo "Memory Information:"
          free -h
          echo "Disk Space Information:"
          df -h
          echo "Uptime Information:"
          uptime
          echo "Currently Logged In Users:"
          who
          echo "Machine Name:"
          hostname
          echo "Root Folder Details with Size:"
          du -sh /* || true
          echo "Root Folder Details with Size:"
          du -sh action-runner* || true

          echo "Machine Name:"
          hostname
 
          echo "Root Folder Details with Size:"
          du -sh /* || true
         
          echo "Root Folder Details with Size:"
          du -d1 -h /actions-runner || true
 
          echo "remove actions folders"
          rm -rf /root/actions_github_pages_* || true  
  
      - name: Checkout code
        uses: actions/checkout@v4

        with:   
          #ref: develop
          ref: Abhishek-Java_upgrade_gh-pages

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
            
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '8'    

      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}

      - name: Get Current Date and Time
        id: current_datetime
        run: |
          echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "CURRENT_TIME=$(date +'%H-%M-%S')" >> $GITHUB_ENV 
        if: always()

      - name: Remove Special Characters from Time and Date
        id: clean_datetime
        run: |
          CLEAN_DATETIME=$(echo "${{ env.CURRENT_DATETIME }}" | tr -d '[:punct:]')
          echo "CLEAN_DATETIME=$CLEAN_DATETIME" >> $GITHUB_ENV
          CLEAN_TIME=$(echo "${{ env.CURRENT_TIME }}" | tr -d '[:punct:]')
          echo "CLEAN_TIME=$CLEAN_TIME" >> $GITHUB_ENV
        if: always() 

      
      - name: Install node dep
        run: |
          npm install

      - name: Run WDIO Tests without codeCoverage
        if: ${{ env.codeCoverage == 'false' }}
        continue-on-error: true
        run: |
          echo "============================================="
          echo "Environment Variables"
          env
          echo "============================================="
          #echo npx wdio ${{ env.wdio_conf_file }} --suite ${{ env.test_suites }}
          echo npx wdio ${{ env.wdio_conf_file }} --suite testsuite1
          #npx wdio ${{ env.wdio_conf_file }} -h ${{env.SELENIUM_GRID_URL}} -p 443 --protocol https --suite ${{ env.test_suites }} 
          npx wdio ${{ env.wdio_conf_file }} -h ${{env.SELENIUM_GRID_URL}} -p 443 --protocol https --suite testsuite1 
          echo "============================================="
          ls -al

      - name: Run WDIO Tests with codeCoverage
        if: ${{ env.codeCoverage == 'true' }}
        continue-on-error: true
        run: |
          echo "============================================="
          echo "Environment Variables"
          env
          echo "============================================="
          echo npx wdio ${{ env.wdio_conf_file }} --suite ${{ env.test_suites }}
          #npx nyc --reporter=html --reporter=text npx wdio ${{ env.wdio_conf_file }} -h ${{env.SELENIUM_GRID_URL}} -p 80 --suite ${{ env.test_suites }} 
          #npx nyc --all=false --reporter=html --reporter=text npx wdio wdio.conf.ngra.js --suite ngrasuite1 ngrasuite2 ngrasuite3 ngrasuite4 ngrasuite5 ngrasuite6 ngrasuite7 ngrasuite8 -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
          #npx nyc --all=false --reporter=html --reporter=text npx wdio wdio.conf.ngra.js --suite Smoke -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
          #npx nyc --all=false --reporter=html --reporter=text npx wdio wdio.conf.js --suite testsuite -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
          npx nyc --reporter=html --reporter=text npx wdio wdio.conf.ngra.js --suite testsuite1 -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
          echo "============================================="
          mkdir -p ./${{env.CLEAN_TIME}} || true
          ls -al
          mkdir -p ./gh_page_static_reports/code_coverage/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
          cp ./coverage/* ./gh_page_static_reports/code_coverage/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
          ls -al



      # - name: Generate Allure report
      #   run: |
      #     npx allure generate ./allure-results --clean
      #     mkdir -p ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #     cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #   continue-on-error: true
      #   if: always()  

    #   - name: Generate Allure Report
    #     run: |
    #       mkdir -p ./allure-results/history
    #       # if [ -d "gh-pages/static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-20/100918/history" ]; then
    #       #   cp -r gh-pages/static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-20/100918/history/* ./allure-results/history
    #       if [ -d "./allure-report/history/" ]; then
    #       cp -r ./allure-report/history/* ./allure-results/history
    #       else
    #         echo "History directory does not exist"
    #       fi
    #       npx allure generate ./allure-results --clean -o allure-report
    #       mkdir -p ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
    #       cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
    #     continue-on-error: true
    #     if: always()  

      # - name: Generate Allure Report
      #   run: |
      #       npm install -g allure-commandline
      #       mkdir -p ./allure-results/history
      #       if [ -d "gh-pages/static_reports/allure-report/${{ env.ENV }}/${{ env.test_suites }}/${{ env.launch }}/history" ]; then
      #           cp -r gh-pages/static_reports/allure-report/${{ env.ENV }}/${{ env.test_suites }}/${{ env.launch }}/history/* ./allure-results/history
      #       else
      #           echo "History directory does not exist"
      #       fi
      #       npx allure generate ./allure-results --clean -o allure-report
      #       mkdir -p ./gh_page_static_reports/allure-report/${{ env.ENV }}/${{ env.test_suites }}/${{ env.launch }}/${{ github.run_id }} || true
      #       cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{ env.ENV }}/${{ env.test_suites }}/${{ env.launch }}/${{ github.run_id }} || true
      #   continue-on-error: true
      #   if: always()


        # - name: Generate Allure Report
      #   run: |
      #     npm install -g allure-commandline
      #     allure generate allure-results --clean -o allure-report
      #     mkdir -p ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #     cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #     # Copy history from previous reports
      #     if [ -d "./gh_page_static_reports/allure-report/history" ]; then
      #       cp -r ./gh_page_static_reports/allure-report/history ./allure-report/history
      #     fi
      #     # Move the new history to the persistent location
      #     cp -r ./allure-report/history /gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #   continue-on-error: true
      #   if: always()

       # - name: Generate Allure report
      #   run: |
      #     npx allure generate ./allure-results --clean
      #     mkdir -p ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #     cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #   continue-on-error: true
      #   if: always() 


      # - name: Reading History from gh pages.
      #   uses: actions/checkout@v4
      #   with:
      #     ref: gh-pages

      # - name: Execute commands
      #   run: |
      #     rm -r ./allure-results* || true
      #     npx wdio wdio.conf.ngra.js --suite testsuite1 -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
      #     mkdir -p ./allure-results/history/
      #     cp -r static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-18/071356/history/ ./allure-results/history/
      #     #cp -r static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-18/071356/history/* ./allure-results/history
      #     echo "============================================="
      #     ls -al
      #     #npx allure generate ./allure-results
      #     #npx allure-report-open
      #     npx allure-report-open
      #     mkdir -p ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #     cp -r ./allure-report/* ./gh_page_static_reports/allure-report/${{env.ENV}}/${{env.test_suites}}/${{env.launch}}/${{ env.CURRENT_DATE }}/${{ env.CLEAN_TIME }} || true
      #   continue-on-error: true
      #   if: always()   
         

      - name: Load report history
        #uses: actions/checkout@v3
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          #sparse-checkout: static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-20/111619/history
          ref: gh-pages # the branch used for the GitHub Pages content.
          path: ./static_reports/allure-report/qa/Smoke/Smoke-NGRA/history # an arbitrary name for a directory to which the previous data will be saved.
          

      
      - name: Build test report
        #uses: simple-elf/allure-report-action@v1.7
        # if: always()  
        #with:  
          #gh_pages: ./static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-20/111619/history # the directory name to which the previous data was downloaded. Must be the same as the path value from the Load test reports history step.
          #allure_results: ./allure-results/ #path to the current test results directory. Depending on the framework you use and the Allure adapter configuration, an appropriate path may be allure-results, build/allure-results, or some custom path.
          #allure_history: ./static_reports/allure-report/qa/Smoke/Smoke-NGRA/2024-12-20/111619/history #an arbitrary name for a directory to which the result will be saved.
      
        run: |  
          ls
          pwd
          mkdir -p ./allure-results/history || true
          cp -r ./static_reports/allure-report/qa/Smoke/Smoke-NGRA/history/* ./allure-results/history || true
          npx nyc --reporter=html --reporter=text npx wdio wdio.conf.ngra.js --suite testsuite1 -p 443 --protocol https -h a200206-idt-osqa-selenium-hub.3300.aws-int.thomsonreuters.com
          npx allure generate ./allure-results --clean -o allure-report  

        
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # See Enable write access for GitHub Actions for more details.
          publish_branch: gh-pages #the branch used for the GitHub Pages content.
          publish_dir: ./allure-report/ #the directory to be published. Must be the same as the allure_history value from the Build test report step.
          destination_dir: ./static_reports/allure-report/qa/Smoke/Smoke-NGRA/history
          keep_files: true
      

        
      # - name: Deploy All the Report into gh-pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_branch: gh-pages
      #     publish_dir: ./gh_page_static_reports
      #     destination_dir: ./static_reports
      #     keep_files: true
      #   if: always()
